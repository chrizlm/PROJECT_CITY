export interface SockjsProps {
    /**
     * 要连接的HTTP
     */
    url: string;
    /**
     * 传递给SockJS的其他选项(https://github.com/sockjs/sockjs-client#sockjs-client-api)
     */
    options?: object;
    /**
     * 订阅(subscribe)的数组
     */
    topics: string[];
    /**
     * 建立连接后回调
     */
    onConnect?: () => any;
    /**
     * 断开连接后回调
     */
    onDisconnect?: () => any;
    /**
     * 下一次重试的时间间隔。默认seconds
     */
    getRetryInterval?: (count: number) => any;
    /**
     * 收到消息后回调
     * @param {(string|Object)} msg 消息从服务器收到，如果JSON格式则是对象
     * @param {string} topic 主题接收消息的主题
     */
    onMessage?: (msg: any, destination: any) => any;
    /**
     * 请求头，将通过STOMP的连接框架传递给服务器或代理
     */
    headers?: object;
    /**
     * 订阅目标时将传递的请求头
     */
    subscribeHeaders?: object;
    /**
     * 是否客户端在断开连接的情况下自动连接
     */
    autoReconnect?: boolean;
    /**
     * 启用调试模式
     */
    debug?: boolean;
    /**
     * 发送和等待心跳消息的毫秒数
     */
    heartbeat?: number;
    /**
     * 接收心跳消息的毫秒数
     */
    heartbeatIncoming?: number;
    /**
     * 发送心跳消息的毫秒数
     */
    heartbeatOutgoing?: number;
    /**
     * 无法建立连接的回调
     */
    onConnectFailure?: (error: any) => any;
}
export interface UseSockjs {
    /**
     * 手动连接到服务器，默认自动连接
     */
    connect: () => void;
    /**
     * 断开 STOMP 客户端并禁用所有重新连接。
     */
    disconnect: () => void;
    /**
     * 将消息发送到指定的订阅地址
     * @param {any} topic 订阅地址
     * @param {any} msg 发送的消息
     * @param {any} optHeaders 订阅请求头消息
     */
    sendMessage: (topic: any, msg: any, optHeaders?: any) => void;
    /**
     * 将Json消息发送到指定的订阅地址
     * @param {any} topic 订阅地址
     * @param {any} msg 发送的消息
     * @param {any} optHeaders 订阅请求头消息
     */
    sendJsonMessage: (topic: any, msg: any, optHeaders?: any) => void;
    /**
     * 获取Stomp实例
     */
    client: any;
}
declare const useSockjs: (props: SockjsProps) => UseSockjs;
export default useSockjs;
