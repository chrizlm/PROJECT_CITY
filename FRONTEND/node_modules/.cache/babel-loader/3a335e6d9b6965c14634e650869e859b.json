{"ast":null,"code":"var _jsxFileName = \"/Users/christopherlijoodi/Documents/CITY_PARKING_PROJECT/FRONTEND/src/pages/PTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState, useCallback, useEffect } from 'react';\nimport DataTable from 'react-data-table-component';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PTable() {\n  _s();\n\n  const [parkLot, setParkLot] = useState([]);\n\n  const retrieveAllParkingLots = () => {\n    axios.get(`http://localhost:8080/apiv1/parkingLot/all`).then(response => {\n      setParkLot(response.data);\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const [selectedRows, setSelectedRows] = useState([]);\n  useEffect(() => {\n    console.log('state', selectedRows);\n  }, [selectedRows]);\n\n  const handleButtonClick = () => {\n    console.log('clicked');\n  };\n\n  const handleChange = useCallback(state => {\n    setSelectedRows(state.selectedRows);\n  }, []);\n  /*\n  private Long parkingLotId;\n  private String parkingRegNo;\n  private String parkingLotLocation;\n  private String parkingLotName;\n  private int totalParkingSpaces;\n   */\n\n  const columns = useMemo(() => [{\n    cell: () => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleButtonClick,\n      children: \"Action\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 33\n    }, this),\n    ignoreRowClick: true,\n    allowOverflow: true,\n    button: true\n  }, {\n    name: 'parkingLotId',\n    selector: row => row.parkingLotId,\n    sortable: true,\n    grow: 2\n  }, {\n    name: 'parkingRegNo',\n    selector: row => row.parkingRegNo,\n    sortable: true\n  }, {\n    name: 'parkingLotLocation',\n    selector: row => row.parkingLotLocation,\n    sortable: true,\n    right: true\n  }, {\n    name: 'parkingLotName',\n    selector: row => row.parkingLotName,\n    sortable: true,\n    right: true\n  }, {\n    name: 'totalParkingSpaces',\n    selector: row => /*#__PURE__*/_jsxDEV(\"row\", {\n      className: \"totalParkingSpaces\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 38\n    }, this),\n    sortable: true,\n    right: true\n  }], []);\n  return /*#__PURE__*/_jsxDEV(DataTable, {\n    title: \"Desserts\",\n    data: retrieveAllParkingLots,\n    columns: columns,\n    selectableRows: true,\n    onSelectedRowsChange: handleChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 13\n  }, this);\n}\n\n_s(PTable, \"q7gtLRSJSLBYadBzlf1cqXs403s=\");\n\n_c = PTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PTable\");","map":{"version":3,"sources":["/Users/christopherlijoodi/Documents/CITY_PARKING_PROJECT/FRONTEND/src/pages/PTable.js"],"names":["React","useMemo","useState","useCallback","useEffect","DataTable","axios","PTable","parkLot","setParkLot","retrieveAllParkingLots","get","then","response","data","console","log","catch","error","selectedRows","setSelectedRows","handleButtonClick","handleChange","state","columns","cell","ignoreRowClick","allowOverflow","button","name","selector","row","parkingLotId","sortable","grow","parkingRegNo","parkingLotLocation","right","parkingLotName"],"mappings":"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","sourcesContent":["import React, { useMemo, useState, useCallback, useEffect } from 'react';\n\nimport DataTable from 'react-data-table-component';\nimport axios from \"axios\";\n\nexport default function PTable(){\n\n        const [parkLot, setParkLot] = useState([]);\n\n    const retrieveAllParkingLots = () =>{\n\n        axios.get(`http://localhost:8080/apiv1/parkingLot/all`).then(response => {\n            setParkLot(response.data);\n            console.log(response);\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n        const [selectedRows, setSelectedRows] = useState([]);\n\n        useEffect(() => {\n\n            console.log('state', selectedRows);\n        }, [selectedRows]);\n\n        const handleButtonClick = () => {\n\n            console.log('clicked');\n        };\n\n        const handleChange = useCallback(state => {\n            setSelectedRows(state.selectedRows);\n        }, []);\n\n        /*\n        private Long parkingLotId;\n    private String parkingRegNo;\n    private String parkingLotLocation;\n    private String parkingLotName;\n    private int totalParkingSpaces;\n         */\n\n        const columns = useMemo(\n            () => [\n                {\n\n                    cell: () => <button onClick={handleButtonClick}>Action</button>,\n                    ignoreRowClick: true,\n                    allowOverflow: true,\n                    button: true,\n                },\n                {\n                    name: 'parkingLotId',\n                    selector: row => row.parkingLotId,\n                    sortable: true,\n                    grow: 2,\n                },\n                {\n                    name: 'parkingRegNo',\n                    selector: row => row.parkingRegNo,\n                    sortable: true,\n                },\n                {\n                    name: 'parkingLotLocation',\n                    selector: row => row.parkingLotLocation,\n                    sortable: true,\n                    right: true,\n                },\n                {\n                    name: 'parkingLotName',\n                    selector: row => row.parkingLotName,\n                    sortable: true,\n                    right: true,\n                },\n                {\n                    name: 'totalParkingSpaces',\n                    selector: row => <row className=\"totalParkingSpaces\"></row>,\n                    sortable: true,\n                    right: true,\n                },\n\n            ],\n            [],\n        );\n\n        return (\n            <DataTable\n                title=\"Desserts\"\n                data={retrieveAllParkingLots}\n                columns={columns}\n                selectableRows\n                onSelectedRowsChange={handleChange}\n            />\n        );\n\n\n}"]},"metadata":{},"sourceType":"module"}