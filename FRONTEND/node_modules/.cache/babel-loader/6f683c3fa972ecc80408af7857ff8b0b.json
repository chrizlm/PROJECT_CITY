{"ast":null,"code":"var _jsxFileName = \"/Users/christopherlijoodi/Desktop/CITYPARK/src/pages/ParkingLotDetails.js\",\n    _s = $RefreshSig$();\n\n//contains all the list of parking lots\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Box, Button, Card, CardHeader, Table, TableBody, TableCell, TableHead, TableRow, TableSortLabel, Tooltip, Paper, Grid } from '@mui/material';\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\nimport { makeStyles } from \"@mui/styles\";\nimport { UseForm, Form } from \"../components/UseForm\";\nimport Controls from \"../components/controls/Controls\";\nimport Avatar from '@mui/material/Avatar';\nimport Select from '@mui/material/Select';\nimport FormControl from '@mui/material/FormControl';\nimport React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport TextField from \"@mui/material/TextField\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DatePicker from '@mui/lab/DatePicker';\nimport TimePicker from \"@mui/lab/TimePicker\";\nimport ParkingLotService from \"../service/ParkingLotService\";\nimport ParkingDetailService from \"../service/ParkingDetailService\";\nimport DataService from \"../service/DataService\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  pageContent: {\n    margin: \"40px\",\n    padding: \"24px\"\n  }\n});\n/*\nconst initialFieldValues = {\n    id: 0,\n    numberPlate: \"\",\n    vehicleType: \"\",\n    location: \"\",\n    parkingLotName: \"\",\n    parkingDate: \"\",\n    parkTime: \"\",\n    parkDuration: \"\",\n\n};\n\n */\n\nexport default function ParkingLotDetails(props) {\n  _s();\n\n  // const [parkDetail, setParkDetail] = useState(initialFieldValues);\n  // const [selected, setSelected] = React.useState(\"\");\n  // const [value, setValue] = React.useState(new Date());\n  const [parkLot, setParkLot] = React.useState([]);\n  const [searchLocation, setSearchLocation] = React.useState(\"\");\n  const [locationData, setLocationData] = useState([]);\n  const [parkingLotData, setParkingLotData] = useState([]);\n  const [searchParkingLot, setSearchParkingLot] = useState(\"\");\n  const [currentParkingList, setCurrentParkingList] = useState(null);\n  const [currentIndex, setCurrentIndex] = useState(-1);\n  useEffect(() => {\n    retrieveAllParkingLotsAreaData();\n  }, []);\n\n  const retrieveAllParkingLotsAreaData = () => {\n    DataService.getLocData().then(response => {\n      setLocationData(response.data);\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const refreshList = () => {\n    retrieveAllParkingLots();\n    setCurrentParkingList(null);\n    setCurrentIndex(-1);\n  };\n\n  useEffect(() => {\n    retrieveAllParkingLots();\n  }, []);\n\n  const retrieveAllParkingLots = () => {\n    ParkingLotService.getAll().then(response => {\n      setParkLot(response.data);\n      console.log(response);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const onChangeSearchLocation = e => {\n    const searchLocation = e.target.value;\n    setSearchLocation(searchLocation);\n  };\n\n  const findParkingLotByLocation = () => {\n    ParkingLotService.findByLocation(searchLocation).then(response => {\n      setParkLot(response.data);\n      console.log(response);\n      console.log(setParkLot);\n      refreshList();\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        '& > :not(style)': {\n          m: 1,\n          width: '100%',\n          height: '100%'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          fullWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n            id: \"parkings\",\n            children: \"Find parking lots\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Select, {\n            labelId: \"parkings\",\n            id: \"parkings\",\n            name: \"location\",\n            value: searchLocation,\n            label: \"Find parking lots\",\n            onChange: onChangeSearchLocation,\n            children: locationData.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: item,\n              children: item\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            fullWidth: true,\n            onClick: findParkingLotByLocation,\n            children: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          align: \"right\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: retrieveAllParkingLots,\n            children: \"GetAll\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, { ...props,\n        children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n          title: \"Parking lots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(PerfectScrollbar, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              minWidth: 800\n            },\n            children: /*#__PURE__*/_jsxDEV(Table, {\n              sx: {\n                minWidth: 650\n              },\n              \"aria-label\": \"simple table\",\n              children: [/*#__PURE__*/_jsxDEV(TableHead, {\n                children: /*#__PURE__*/_jsxDEV(TableRow, {\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"parkingLotId\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 179,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"parkingLotName\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"totalParkingSpaces\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 185,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: \"Book\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n                children: parkLot.map(park => /*#__PURE__*/_jsxDEV(TableRow, {\n                  hover: true,\n                  children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                    children: park.parkingLotId\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: park.parkingLotName\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: park.totalParkingSpaces\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 206,\n                    columnNumber: 45\n                  }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                    children: /*#__PURE__*/_jsxDEV(Button, {\n                      children: \"Book\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 210,\n                      columnNumber: 49\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 45\n                  }, this)]\n                }, park.parkingLotId, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 196,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            justifyContent: 'flex-end',\n            p: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            endIcon: /*#__PURE__*/_jsxDEV(ArrowRightIcon, {\n              fontSize: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 38\n            }, this),\n            size: \"small\",\n            variant: \"text\",\n            children: \"View all\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n\n_s(ParkingLotDetails, \"8hfJhwxsKoTIlOpD1o8ZI0LetE0=\", false, function () {\n  return [useStyles];\n});\n\n_c = ParkingLotDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParkingLotDetails\");","map":{"version":3,"sources":["/Users/christopherlijoodi/Desktop/CITYPARK/src/pages/ParkingLotDetails.js"],"names":["PerfectScrollbar","Box","Button","Card","CardHeader","Table","TableBody","TableCell","TableHead","TableRow","TableSortLabel","Tooltip","Paper","Grid","ArrowRightIcon","makeStyles","UseForm","Form","Controls","Avatar","Select","FormControl","React","useState","useEffect","axios","InputLabel","MenuItem","AdapterDateFns","TextField","LocalizationProvider","DatePicker","TimePicker","ParkingLotService","ParkingDetailService","DataService","useStyles","pageContent","margin","padding","ParkingLotDetails","props","parkLot","setParkLot","searchLocation","setSearchLocation","locationData","setLocationData","parkingLotData","setParkingLotData","searchParkingLot","setSearchParkingLot","currentParkingList","setCurrentParkingList","currentIndex","setCurrentIndex","retrieveAllParkingLotsAreaData","getLocData","then","response","data","console","log","catch","error","refreshList","retrieveAllParkingLots","getAll","onChangeSearchLocation","e","target","value","findParkingLotByLocation","findByLocation","classes","display","flexWrap","m","width","height","map","item","index","minWidth","park","parkingLotId","parkingLotName","totalParkingSpaces","justifyContent","p"],"mappings":"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","sourcesContent":["//contains all the list of parking lots\n\n\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n    Box,\n    Button,\n    Card,\n    CardHeader,\n    Table,\n    TableBody,\n    TableCell,\n    TableHead,\n    TableRow,\n    TableSortLabel,\n    Tooltip,\n    Paper,\n    Grid,\n\n} from '@mui/material';\nimport ArrowRightIcon from '@mui/icons-material/ArrowRight';\nimport { makeStyles } from \"@mui/styles\";\nimport { UseForm, Form } from \"../components/UseForm\";\nimport Controls from \"../components/controls/Controls\";\nimport Avatar from '@mui/material/Avatar';\nimport Select from '@mui/material/Select';\nimport FormControl from '@mui/material/FormControl';\nimport React, { useState, useEffect  } from 'react'\nimport axios from \"axios\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport TextField from \"@mui/material/TextField\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DatePicker from '@mui/lab/DatePicker';\nimport TimePicker from \"@mui/lab/TimePicker\";\nimport ParkingLotService from \"../service/ParkingLotService\";\nimport ParkingDetailService from \"../service/ParkingDetailService\";\nimport DataService from \"../service/DataService\";\n\nconst useStyles = makeStyles({\n    pageContent: {\n        margin: \"40px\",\n        padding: \"24px\",\n    },\n\n});\n\n/*\nconst initialFieldValues = {\n    id: 0,\n    numberPlate: \"\",\n    vehicleType: \"\",\n    location: \"\",\n    parkingLotName: \"\",\n    parkingDate: \"\",\n    parkTime: \"\",\n    parkDuration: \"\",\n\n};\n\n */\n\nexport default function ParkingLotDetails(props){\n   // const [parkDetail, setParkDetail] = useState(initialFieldValues);\n   // const [selected, setSelected] = React.useState(\"\");\n   // const [value, setValue] = React.useState(new Date());\n    const [parkLot, setParkLot] = React.useState([]);\n    const [searchLocation, setSearchLocation] = React.useState(\"\");\n    const [locationData, setLocationData] = useState([]);\n    const [parkingLotData, setParkingLotData] = useState([]);\n    const [searchParkingLot, setSearchParkingLot] = useState(\"\");\n    const [currentParkingList, setCurrentParkingList] = useState(null);\n    const [currentIndex, setCurrentIndex] = useState(-1);\n\n    useEffect(() =>{\n        retrieveAllParkingLotsAreaData();\n    }, []);\n\n    const retrieveAllParkingLotsAreaData = () =>{\n        DataService.getLocData().then(response => {\n            setLocationData(response.data);\n            console.log(response);\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    const refreshList = () =>{\n        retrieveAllParkingLots();\n        setCurrentParkingList(null);\n        setCurrentIndex(-1);\n    }\n\n    \n\n    useEffect(() =>{\n        retrieveAllParkingLots();\n    }, []);\n\n    const retrieveAllParkingLots = () =>{\n        ParkingLotService.getAll().then(response => {\n            setParkLot(response.data);\n            console.log(response);\n        }).catch(error => {\n            console.log(error)\n        })\n    }\n\n    const onChangeSearchLocation = e =>{\n        const searchLocation = e.target.value;\n        setSearchLocation(searchLocation);\n    }\n\n    const findParkingLotByLocation = () =>{\n        ParkingLotService.findByLocation(searchLocation).then(response => {\n            setParkLot(response.data);\n            console.log(response);\n            console.log(setParkLot);\n            refreshList();\n        })\n            .catch(error => {\n                console.log(error)\n            })\n    }\n\n    const classes = useStyles();\n\n    return (\n        <>\n            <Box\n                sx={{\n                    display: 'flex',\n                    flexWrap: 'wrap',\n                    '& > :not(style)': {\n                        m: 1,\n                        width: '100%',\n                        height: '100%',\n                    },\n                }}\n            >\n\n                <Form>\n\n                    <FormControl fullWidth>\n                        <InputLabel id=\"parkings\">Find parking lots</InputLabel>\n                        <Select\n                            labelId=\"parkings\"\n                            id=\"parkings\"\n                            name=\"location\"\n                            value={searchLocation}\n                            label=\"Find parking lots\"\n                            onChange={onChangeSearchLocation}\n                        >{locationData.map((item ,index) =>\n                            <MenuItem value={item} key={index}>{item}</MenuItem>)}\n                        </Select>\n                        <Button variant=\"contained\"\n                                fullWidth\n                                onClick={findParkingLotByLocation}\n                        >Search</Button>\n                    </FormControl>\n\n\n\n                    <div align=\"right\">\n                        <Button variant=\"contained\"\n                                onClick={retrieveAllParkingLots}>GetAll</Button>\n                    </div>\n\n                </Form>\n\n                <Card {...props}>\n                    <CardHeader title=\"Parking lots\" />\n                    <PerfectScrollbar>\n                        <Box sx={{ minWidth: 800 }}>\n                            <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            parkingLotId\n                                        </TableCell>\n                                        <TableCell>\n                                            parkingLotName\n                                        </TableCell>\n                                        <TableCell>\n                                            totalParkingSpaces\n                                        </TableCell>\n                                        <TableCell>\n                                            Book\n                                        </TableCell>\n\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {parkLot.map((park) =>(\n                                        <TableRow\n                                            hover\n                                            key={park.parkingLotId}\n                                        >\n                                            <TableCell>\n                                                {park.parkingLotId}\n                                            </TableCell>\n                                            <TableCell>\n                                                {park.parkingLotName}\n                                            </TableCell>\n                                            <TableCell>\n                                                {park.totalParkingSpaces}\n                                            </TableCell>\n                                            <TableCell>\n                                                <Button>Book</Button>\n                                            </TableCell>\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </Box>\n                    </PerfectScrollbar>\n                    <Box\n                        sx={{\n                            display: 'flex',\n                            justifyContent: 'flex-end',\n                            p: 2\n                        }}\n                    >\n                        <Button\n                            color=\"primary\"\n                            endIcon={<ArrowRightIcon fontSize=\"small\" />}\n                            size=\"small\"\n                            variant=\"text\"\n                        >\n                            View all\n                        </Button>\n                    </Box>\n\n                </Card>\n            </Box>\n            </>\n    )\n}"]},"metadata":{},"sourceType":"module"}