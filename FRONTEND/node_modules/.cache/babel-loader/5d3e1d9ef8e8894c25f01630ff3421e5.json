{"ast":null,"code":"var _jsxFileName = \"/Users/christopherlijoodi/Documents/CITY_PARKING_PROJECT/FRONTEND/src/components/controls/Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dropdown = () => {\n  _s();\n\n  const [area, setArea] = React.useState(\"\");\n  const [parklot, setParklot] = React.useState(\"\");\n  /** \"selected\" here is state variable which will hold the\n   * value of currently selected dropdown.\n   */\n\n  const [selected, setSelected] = React.useState(\"\");\n  /** Function that will set different values to state variable\n   * based on which dropdown is selected\n   */\n\n  const changeSelectOptionHandler = event => {\n    setSelected(event.target.value);\n    setArea(event.target.value);\n  };\n\n  const handleChange = event => {\n    setParklot(event.target.value);\n  };\n  /** Different arrays for different dropdowns */\n\n\n  const algorithm = [\"Searching Algorithm\", \"Sorting Algorithm\", \"Graph Algorithm\"];\n  const language = [\"C++\", \"Java\", \"Python\", \"C#\"];\n  const dataStructure = [\"Arrays\", \"LinkedList\", \"Stack\", \"Queue\"];\n  /** Type variable to store different array for different dropdown */\n\n  let type = null;\n  /** This will be used to create set of options that user will see */\n\n  let options = null;\n  /** Setting Type variable according to dropdown */\n\n  if (selected === \"Algorithm\") {\n    type = algorithm;\n  } else if (selected === \"Language\") {\n    type = language;\n  } else if (selected === \"Data Structure\") {\n    type = dataStructure;\n  }\n  /** If \"Type\" is null or undefined then options will be null,\n   * otherwise it will create a options iterable based on our array\n   */\n\n\n  if (type) {\n    options = type.map(el => /*#__PURE__*/_jsxDEV(MenuItem, {\n      value: el,\n      children: el\n    }, el, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 33\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      minWidth: 120\n    },\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"dependant-dropdown\",\n        children: \"Area\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"dependant-dropdown\",\n        id: \"dependant-dropdown\",\n        value: area,\n        label: \"Area\",\n        onChange: changeSelectOptionHandler,\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"Choose...\",\n          children: \"Choose...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"Algorithm\",\n          children: \"Algorithm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"Language\",\n          children: \"Language\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"Data Structure\",\n          children: \"Data Structure\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        id: \"dropdown\",\n        children: \"Park Lot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        labelId: \"dropdown\",\n        id: \"dropdown\",\n        value: parklot,\n        label: \"Parklot\",\n        onChange: handleChange,\n        children: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dropdown, \"xjLo1hkI+nE2EzBG7qXzJotuWZA=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["/Users/christopherlijoodi/Documents/CITY_PARKING_PROJECT/FRONTEND/src/components/controls/Dropdown.js"],"names":["React","useState","useEffect","Box","InputLabel","MenuItem","FormControl","Select","Dropdown","area","setArea","parklot","setParklot","selected","setSelected","changeSelectOptionHandler","event","target","value","handleChange","algorithm","language","dataStructure","type","options","map","el","minWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\n\nconst Dropdown = () => {\n  const [area, setArea] = React.useState(\"\");\n  const [parklot, setParklot] = React.useState(\"\");\n  /** \"selected\" here is state variable which will hold the\n   * value of currently selected dropdown.\n   */\n  const [selected, setSelected] = React.useState(\"\");\n\n  /** Function that will set different values to state variable\n   * based on which dropdown is selected\n   */\n  const changeSelectOptionHandler = (event) => {\n    setSelected(event.target.value);\n    setArea(event.target.value);\n  };\n\n  const handleChange = (event) => {\n    setParklot(event.target.value);\n  };\n\n  /** Different arrays for different dropdowns */\n  const algorithm = [\n    \"Searching Algorithm\",\n    \"Sorting Algorithm\",\n    \"Graph Algorithm\",\n  ];\n  const language = [\"C++\", \"Java\", \"Python\", \"C#\"];\n  const dataStructure = [\"Arrays\", \"LinkedList\", \"Stack\", \"Queue\"];\n\n  /** Type variable to store different array for different dropdown */\n  let type = null;\n\n  /** This will be used to create set of options that user will see */\n  let options = null;\n\n  /** Setting Type variable according to dropdown */\n  if (selected === \"Algorithm\") {\n    type = algorithm;\n  } else if (selected === \"Language\") {\n    type = language;\n  } else if (selected === \"Data Structure\") {\n    type = dataStructure;\n  }\n\n  /** If \"Type\" is null or undefined then options will be null,\n   * otherwise it will create a options iterable based on our array\n   */\n  if (type) {\n    options = type.map((el) => (<MenuItem key={el} value={el}>{el}</MenuItem>));\n  }\n  return (\n    <Box sx={{ minWidth: 120 }}>\n      <FormControl fullWidth>\n        <InputLabel id=\"dependant-dropdown\">Area</InputLabel>\n        <Select\n          labelId=\"dependant-dropdown\"\n          id=\"dependant-dropdown\"\n          value={area}\n          label=\"Area\"\n          onChange={changeSelectOptionHandler}\n        >\n          <MenuItem value='Choose...'>Choose...</MenuItem>\n          <MenuItem value='Algorithm'>Algorithm</MenuItem>\n          <MenuItem value='Language'>Language</MenuItem>\n          <MenuItem value='Data Structure'>Data Structure</MenuItem>\n        </Select>\n        </FormControl>\n        <FormControl>\n        <InputLabel id=\"dropdown\">Park Lot</InputLabel>\n        <Select\n        labelId=\"dropdown\"\n        id=\"dropdown\"\n        value={parklot}\n        label=\"Parklot\"\n        onChange={handleChange}>{options}</Select>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default Dropdown;\n"]},"metadata":{},"sourceType":"module"}