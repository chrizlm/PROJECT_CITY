{"ast":null,"code":"var _jsxFileName = \"/Users/christopherlijoodi/Desktop/CITYPARK/src/pages/Motorist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { InputAdornment, Paper, TableBody, TableCell, TableRow, Toolbar } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport MotoristForm from \"./MotoristForm\";\nimport UseTable from \"../components/UseTable\";\nimport axios from \"axios\";\nimport * as MotoristService from \"../service/MotoristService\";\nimport { Search } from \"@mui/icons-material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Popups from \"../components/Popups\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport Controls from \"../components/controls/Controls\";\nimport PageHeader from \"../components/PageHeader\";\nimport PeopleOutlineIcon from \"@mui/icons-material/PeopleOutline\";\nimport Notification from \"../components/Notification\";\nimport ConfirmDialog from \"../components/ConfirmDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  pageContent: {\n    margin: \"40px\",\n    padding: \"24px\"\n  },\n  searchInput: {\n    width: \"75%\"\n  },\n  newButton: {\n    position: \"absolute\",\n    right: \"10px\"\n  }\n});\nconst headcells = [{\n  id: \"motoristFirstName\",\n  label: \"First Name\"\n}, {\n  id: \"motoristLastName\",\n  label: \"Last Name\"\n}, {\n  id: \"motoristEmail\",\n  label: \"Email\",\n  disableSorting: true\n}, {\n  id: \"motoristMobile\",\n  label: \"Mobile\",\n  disableSorting: true\n}];\nexport default function Motorist() {\n  _s();\n\n  const [recordForEdit, setRecordForEdit] = useState(null);\n  const [filterFn, setFilterFn] = useState({\n    fn: items => {\n      return items;\n    }\n  });\n  const [openPopup, setOpenPopup] = useState(false);\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\"\n  });\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    title: \"\",\n    subTitle: \"\"\n  });\n  const classes = useStyles(); //const [records, setRecords] = useState(MotoristService.getAll());\n\n  const [repo, setRepo] = useState([]);\n\n  const getRepo = () => {\n    axios.get(\"http://localhost:8080/api/motorist/all\").then(response => {\n      console.log(response);\n      /* const myRepo = response.data;\n      setRepo(myRepo); */\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => getRepo(), []);\n  const {\n    TablContainer,\n    TablHead,\n    TblPagination,\n    recordsAfterPagingAndSorting\n  } = UseTable(repo, headcells, filterFn);\n\n  const handleSearch = e => {\n    let target = e.target;\n    setFilterFn({\n      fn: items => {\n        if (target.value == \"\") return items;else return items.filter(x => x.fullName.toLowerCase().includes(target.value));\n      }\n    });\n  };\n\n  const addOrEdit = (motorist, resetForm) => {\n    if (motorist.id == 0) MotoristService.create(motorist);else MotoristService.update(motorist);\n    resetForm();\n    setRecordForEdit(null);\n    setOpenPopup(false);\n    setRepo(getRepo());\n    setNotify({\n      isOpen: true,\n      message: \"Submitted Successfully\",\n      type: \"success\"\n    });\n  };\n\n  const openInPopup = item => {\n    setRecordForEdit(item);\n    setOpenPopup(true);\n  };\n\n  const onDelete = id => {\n    setConfirmDialog({ ...confirmDialog,\n      isOpen: false\n    });\n    MotoristService.deleteMotorist(id);\n    setRepo(getRepo());\n    setNotify({\n      isOpen: true,\n      message: \"Deleted Successfully\",\n      type: \"error\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      title: \"Motorist\",\n      subTitle: \"Design with validation\",\n      icon: /*#__PURE__*/_jsxDEV(PeopleOutlineIcon, {\n        fontSize: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      className: classes.pageContent,\n      children: [/*#__PURE__*/_jsxDEV(Toolbar, {\n        children: /*#__PURE__*/_jsxDEV(Controls.Input, {\n          label: \"Search Motorist\",\n          className: classes.searchInput,\n          InputProps: {\n            startAdonment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n              position: \"start\",\n              children: /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 150,\n              columnNumber: 17\n            }, this)\n          },\n          onChange: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls.MuiButton, {\n        text: \"Add New\",\n        variant: \"outlined\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 22\n        }, this),\n        className: classes.newButton,\n        onClick: () => {\n          setOpenPopup(true);\n          setRecordForEdit(null);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TablContainer, {\n        children: [/*#__PURE__*/_jsxDEV(TablHead, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: recordsAfterPagingAndSorting().map(item => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.motoristFirstName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.motoristLastName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.motoristEmail\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: item.motoristMobile\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [/*#__PURE__*/_jsxDEV(Controls.ActionButton, {\n                color: \"primary\",\n                onClick: () => {\n                  openInPopup(item);\n                },\n                children: /*#__PURE__*/_jsxDEV(EditOutlinedIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Controls.ActionButton, {\n                color: \"secondary\",\n                onClick: () => {\n                  setConfirmDialog({\n                    isOpen: true,\n                    title: \"Are you sure to delete record?\",\n                    subTitle: \"You cant undo\",\n                    onConfirm: () => {\n                      onDelete(item.id);\n                    }\n                  });\n                },\n                children: /*#__PURE__*/_jsxDEV(CloseIcon, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 201,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 188,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this)]\n          }, item.motoristId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popups, {\n      title: \"Motorist Form\",\n      openPopup: openPopup,\n      setOpenPopup: setOpenPopup,\n      children: /*#__PURE__*/_jsxDEV(MotoristForm, {\n        recordForEdit: recordForEdit,\n        addOrEdit: addOrEdit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmDialog, {\n      confirmDialog: ConfirmDialog,\n      setConfirmDialog: setConfirmDialog\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n/* export default function Motorist(){\n\n    const classes = useStyles();\n    const [records, setRecords] = useState(MotoristService.getAll());\n\n    const {TablContainer} = UseTable();\n\n    return(\n        <>\n        <Paper className={classes.pageContent}>\n            <MotoristForm />\n            <TablContainer>\n                <TableBody>\n                \n{records.map(item =>(\n                        <TableRow key={item.motoristId}>\n                            <TableCell>{item.motoristFirstName}</TableCell>\n                            <TableCell>{item.motoristLastName}</TableCell>\n                            <TableCell>{item.motoristEmail}</TableCell>\n                            <TableCell>{item.motoristMobile}</TableCell>\n                        </TableRow>\n                    ))}\n\n                </TableBody>\n            </TablContainer>\n        </Paper>\n        </>\n    )\n} */\n\n/* \n{records.map(item =>(\n                        <TableRow key={item.motoristId}>\n                            <TableCell>{item.motoristFirstName}</TableCell>\n                            <TableCell>{item.motoristLastName}</TableCell>\n                            <TableCell>{item.motoristEmail}</TableCell>\n                            <TableCell>{item.motoristMobile}</TableCell>\n                        </TableRow>\n                    ))}\n*/\n\n_s(Motorist, \"SxrbyyDaiZiEqZgR52bEXe2rx1c=\", false, function () {\n  return [useStyles];\n});\n\n_c = Motorist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Motorist\");","map":{"version":3,"sources":["/Users/christopherlijoodi/Desktop/CITYPARK/src/pages/Motorist.js"],"names":["React","useState","useEffect","InputAdornment","Paper","TableBody","TableCell","TableRow","Toolbar","makeStyles","MotoristForm","UseTable","axios","MotoristService","Search","AddIcon","Popups","CloseIcon","EditOutlinedIcon","Controls","PageHeader","PeopleOutlineIcon","Notification","ConfirmDialog","useStyles","pageContent","margin","padding","searchInput","width","newButton","position","right","headcells","id","label","disableSorting","Motorist","recordForEdit","setRecordForEdit","filterFn","setFilterFn","fn","items","openPopup","setOpenPopup","notify","setNotify","isOpen","message","type","confirmDialog","setConfirmDialog","title","subTitle","classes","repo","setRepo","getRepo","get","then","response","console","log","catch","error","TablContainer","TablHead","TblPagination","recordsAfterPagingAndSorting","handleSearch","e","target","value","filter","x","fullName","toLowerCase","includes","addOrEdit","motorist","resetForm","create","update","openInPopup","item","onDelete","deleteMotorist","startAdonment","map","motoristFirstName","motoristLastName","motoristEmail","motoristMobile","onConfirm","motoristId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  InputAdornment,\n  Paper,\n  TableBody,\n  TableCell,\n  TableRow,\n  Toolbar,\n} from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport MotoristForm from \"./MotoristForm\";\nimport UseTable from \"../components/UseTable\";\nimport axios from \"axios\";\nimport * as MotoristService from \"../service/MotoristService\";\nimport { Search } from \"@mui/icons-material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Popups from \"../components/Popups\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport EditOutlinedIcon from \"@mui/icons-material/EditOutlined\";\nimport Controls from \"../components/controls/Controls\";\nimport PageHeader from \"../components/PageHeader\";\nimport PeopleOutlineIcon from \"@mui/icons-material/PeopleOutline\";\nimport Notification from \"../components/Notification\";\nimport ConfirmDialog from \"../components/ConfirmDialog\";\n\nconst useStyles = makeStyles({\n  pageContent: {\n    margin: \"40px\",\n    padding: \"24px\",\n  },\n  searchInput: {\n    width: \"75%\",\n  },\n  newButton: {\n    position: \"absolute\",\n    right: \"10px\",\n  },\n});\n\nconst headcells = [\n  { id: \"motoristFirstName\", label: \"First Name\" },\n  { id: \"motoristLastName\", label: \"Last Name\" },\n  { id: \"motoristEmail\", label: \"Email\", disableSorting: true },\n  { id: \"motoristMobile\", label: \"Mobile\", disableSorting: true },\n];\n\nexport default function Motorist() {\n  const [recordForEdit, setRecordForEdit] = useState(null);\n  const [filterFn, setFilterFn] = useState({\n    fn: (items) => {\n      return items;\n    },\n  });\n  const [openPopup, setOpenPopup] = useState(false);\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\",\n  });\n  const [confirmDialog, setConfirmDialog] = useState({\n    isOpen: false,\n    title: \"\",\n    subTitle: \"\",\n  });\n  const classes = useStyles();\n  //const [records, setRecords] = useState(MotoristService.getAll());\n  const [repo, setRepo] = useState([]);\n  const getRepo = () => {\n    axios\n      .get(\"http://localhost:8080/api/motorist/all\")\n      .then((response) => {\n        console.log(response);\n        /* const myRepo = response.data;\n        setRepo(myRepo); */\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  useEffect(() => getRepo(), []);\n\n  const {\n    TablContainer,\n    TablHead,\n    TblPagination,\n    recordsAfterPagingAndSorting,\n  } = UseTable(repo, headcells, filterFn);\n\n  const handleSearch = (e) => {\n    let target = e.target;\n    setFilterFn({\n      fn: (items) => {\n        if (target.value == \"\") return items;\n        else\n          return items.filter((x) =>\n            x.fullName.toLowerCase().includes(target.value)\n          );\n      },\n    });\n  };\n\n  const addOrEdit = (motorist, resetForm) => {\n    if (motorist.id == 0) MotoristService.create(motorist);\n    else MotoristService.update(motorist);\n    resetForm();\n    setRecordForEdit(null);\n    setOpenPopup(false);\n    setRepo(getRepo());\n    setNotify({\n      isOpen: true,\n      message: \"Submitted Successfully\",\n      type: \"success\",\n    });\n  };\n\n  const openInPopup = (item) => {\n    setRecordForEdit(item);\n    setOpenPopup(true);\n  };\n\n  const onDelete = (id) => {\n    setConfirmDialog({\n      ...confirmDialog,\n      isOpen: false,\n    });\n    MotoristService.deleteMotorist(id);\n    setRepo(getRepo());\n    setNotify({\n      isOpen: true,\n      message: \"Deleted Successfully\",\n      type: \"error\",\n    });\n  };\n\n  return (\n    <>\n      <PageHeader\n        title=\"Motorist\"\n        subTitle=\"Design with validation\"\n        icon={<PeopleOutlineIcon fontSize=\"large\" />}\n      />\n      <Paper className={classes.pageContent}>\n        <Toolbar>\n          <Controls.Input\n            label=\"Search Motorist\"\n            className={classes.searchInput}\n            InputProps={{\n              startAdonment: (\n                <InputAdornment position=\"start\">\n                  <Search />\n                </InputAdornment>\n              ),\n            }}\n            onChange={handleSearch}\n          />\n        </Toolbar>\n\n        <Controls.MuiButton\n          text=\"Add New\"\n          variant=\"outlined\"\n          startIcon={<AddIcon />}\n          className={classes.newButton}\n          onClick={() => {\n            setOpenPopup(true);\n            setRecordForEdit(null);\n          }}\n        />\n\n        <TablContainer>\n          <TablHead />\n          <TableBody>\n            {recordsAfterPagingAndSorting().map((item) => (\n              <TableRow key={item.motoristId}>\n                <TableCell>{item.motoristFirstName}</TableCell>\n                <TableCell>{item.motoristLastName}</TableCell>\n                <TableCell>{item.motoristEmail}</TableCell>\n                <TableCell>{item.motoristMobile}</TableCell>\n                <TableCell>\n                  <Controls.ActionButton\n                    color=\"primary\"\n                    onClick={() => {\n                      openInPopup(item);\n                    }}\n                  >\n                    <EditOutlinedIcon fontSize=\"small\" />\n                  </Controls.ActionButton>\n                  <Controls.ActionButton\n                    color=\"secondary\"\n                    onClick={() => {\n                      setConfirmDialog({\n                        isOpen: true,\n                        title: \"Are you sure to delete record?\",\n                        subTitle: \"You cant undo\",\n                        onConfirm: () => {\n                          onDelete(item.id);\n                        },\n                      });\n                    }}\n                  >\n                    <CloseIcon fontSize=\"small\" />\n                  </Controls.ActionButton>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </TablContainer>\n      </Paper>\n      <Popups\n        title=\"Motorist Form\"\n        openPopup={openPopup}\n        setOpenPopup={setOpenPopup}\n      >\n        <MotoristForm recordForEdit={recordForEdit} addOrEdit={addOrEdit} />\n      </Popups>\n      <Notification notify={notify} setNotify={setNotify} />\n      <ConfirmDialog\n        confirmDialog={ConfirmDialog}\n        setConfirmDialog={setConfirmDialog}\n      />\n    </>\n  );\n}\n\n/* export default function Motorist(){\n\n    const classes = useStyles();\n    const [records, setRecords] = useState(MotoristService.getAll());\n\n    const {TablContainer} = UseTable();\n\n    return(\n        <>\n        <Paper className={classes.pageContent}>\n            <MotoristForm />\n            <TablContainer>\n                <TableBody>\n                \n{records.map(item =>(\n                        <TableRow key={item.motoristId}>\n                            <TableCell>{item.motoristFirstName}</TableCell>\n                            <TableCell>{item.motoristLastName}</TableCell>\n                            <TableCell>{item.motoristEmail}</TableCell>\n                            <TableCell>{item.motoristMobile}</TableCell>\n                        </TableRow>\n                    ))}\n\n                </TableBody>\n            </TablContainer>\n        </Paper>\n        </>\n    )\n} */\n\n/* \n{records.map(item =>(\n                        <TableRow key={item.motoristId}>\n                            <TableCell>{item.motoristFirstName}</TableCell>\n                            <TableCell>{item.motoristLastName}</TableCell>\n                            <TableCell>{item.motoristEmail}</TableCell>\n                            <TableCell>{item.motoristMobile}</TableCell>\n                        </TableRow>\n                    ))}\n*/\n"]},"metadata":{},"sourceType":"module"}